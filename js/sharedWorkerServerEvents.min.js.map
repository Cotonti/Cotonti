{"version":3,"file":"sharedWorkerServerEvents.min.js","mappings":"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","sources":["webpack://cotonti/./src/serverEvents/driver/BaseServerEventsDriver.js","webpack://cotonti/./src/serverEvents/driver/ServerEventsSSEDriver.js","webpack://cotonti/./src/serverEvents/driver/ServerEventsAjaxDriver.js","webpack://cotonti/./src/serverEvents/driver/ServerEventsDriverFactory.js","webpack://cotonti/./src/serverEvents/sharedWorker.js"],"sourcesContent":["/**\r\n * Base server events driver\r\n * @package Cotonti\r\n * @copyright (c) Cotonti Team\r\n */\r\nexport class BaseServerEventsDriver extends EventTarget {\r\n    mode = 'production';\r\n\r\n    /**\r\n     * @type {string|null}\r\n     */\r\n    eventsUrl = null;\r\n\r\n    constructor(eventsUrl, mode = null) {\r\n        super();\r\n\r\n        if (mode !== null && mode !== '') {\r\n            this.mode = mode;\r\n        }\r\n        this.eventsUrl = eventsUrl;\r\n    }\r\n\r\n    init() { }\r\n\r\n    onEventTriggered(eventData) {\r\n        if (this.mode !== 'production') {\r\n            console.log('ServerEventsDriver: Server triggered event', eventData);\r\n        }\r\n\r\n        const event = new CustomEvent('event', {detail: eventData});\r\n        this.dispatchEvent(event);\r\n    }\r\n}","import {BaseServerEventsDriver} from \"./BaseServerEventsDriver\";\r\n\r\n/**\r\n * Server - Sent events driver\r\n * @package Cotonti\r\n * @copyright (c) Cotonti Team\r\n * @link https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events\r\n */\r\nexport class ServerEventsSSEDriver extends BaseServerEventsDriver {\r\n    /**\r\n     * @type {EventSource|null}\r\n     */\r\n    #eventSource = null;\r\n\r\n    init() {\r\n        if (this.#eventSource !== null) {\r\n            return;\r\n        }\r\n\r\n        if (this.mode !== 'production') {\r\n            console.log('init ServerEventsSSEDriver. ', this.eventsUrl);\r\n        }\r\n\r\n        const url = this.eventsUrl + '&ts=' + Date.now();\r\n        this.#eventSource = new EventSource(url);\r\n\r\n        if (this.mode !== 'production') {\r\n            this.#eventSource.onopen = function (event) {\r\n                console.log('ServerEventsSSEDriver connection is open');\r\n            };\r\n        }\r\n\r\n        this.#eventSource.onmessage = (event) => {\r\n            const eventData = JSON.parse(event.data);\r\n            if (eventData.data !== undefined && (typeof eventData.data === 'string') && eventData.data !== '') {\r\n                eventData.data = JSON.parse(eventData.data);\r\n            }\r\n            eventData.eventId = event.lastEventId;\r\n            this.onEventTriggered(eventData);\r\n        };\r\n\r\n        if (this.mode !== 'production') {\r\n            this.#eventSource.onerror = function (event) {\r\n                console.log('ServerEventsSSEDriver connection error');\r\n            }\r\n        }\r\n    }\r\n}","import {BaseServerEventsDriver} from \"./BaseServerEventsDriver\";\r\n\r\n/**\r\n * Server events ajax driver\r\n * @package Cotonti\r\n * @copyright (c) Cotonti Team\r\n */\r\nexport class ServerEventsAjaxDriver extends BaseServerEventsDriver {\r\n    #timeOutPeriod = 6000; // 6 sec.\r\n\r\n    #timerId = null;\r\n\r\n    #inited = false;\r\n\r\n    init() {\r\n        if (this.#inited) {\r\n            return;\r\n        }\r\n\r\n        this.#inited = true;\r\n\r\n        if (this.mode !== 'production') {\r\n            console.log('init ServerEventsAjaxDriver ', this.eventsUrl);\r\n        }\r\n\r\n        this.#timerId = setTimeout(() => this.#getEvents(), 500);\r\n    }\r\n\r\n    async #getEvents() {\r\n        try {\r\n            const url = this.eventsUrl + '&ts=' + Date.now();\r\n            const response = await fetch(url);\r\n            if (!response.ok) {\r\n                throw new Error(`Response status: ${response.status}`);\r\n            }\r\n\r\n            const result = await response.json();\r\n            if (result.events !== undefined) {\r\n                result.events.forEach((event) => {\r\n                    event.eventId = event.id !== undefined ? event.id : null;\r\n                    this.onEventTriggered(event);\r\n                });\r\n            }\r\n\r\n            this.#timerId = setTimeout(() => this.#getEvents(), this.#timeOutPeriod);\r\n        } catch (error) {\r\n            console.log('ServerEventsAjaxDriver get events error: ' + error.message);\r\n            this.#timerId = setTimeout(() => this.#getEvents(), this.#timeOutPeriod);\r\n        }\r\n    }\r\n}","import {ServerEventsSSEDriver} from \"./ServerEventsSSEDriver\";\r\nimport {ServerEventsAjaxDriver} from \"./ServerEventsAjaxDriver\";\r\n\r\n/**\r\n * Base server events driver\r\n * @package Cotonti\r\n * @copyright (c) Cotonti Team\r\n */\r\nexport class ServerEventsDriverFactory {\r\n    #baseUrl = '/';\r\n\r\n    #mode = 'production'\r\n\r\n    constructor(baseUrl = null, mode = null) {\r\n        if (baseUrl !== null) {\r\n            this.#baseUrl = baseUrl;\r\n        }\r\n        if (mode !== null) {\r\n            this.#mode = mode;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {string} driverType\r\n     * @returns {ServerEventsSSEDriver|ServerEventsAjaxDriver}\r\n     */\r\n    getByType(driverType) {\r\n        let driver = null;\r\n\r\n        const serverSentEventsUrl = this.#baseUrl + '?n=server-events&a=sse';\r\n        const ajaxEventsUrl = this.#baseUrl + '?n=server-events&a=ajax&_ajax=1';\r\n\r\n        switch (driverType) {\r\n            case 'sse':\r\n                // Server-Sent events driver\r\n                driver = new ServerEventsSSEDriver(serverSentEventsUrl);\r\n                if (this.#mode !== 'production') {\r\n                    console.log('using ServerEventsSSEDriver', serverSentEventsUrl);\r\n                }\r\n                break;\r\n\r\n            default:\r\n                driver = new ServerEventsAjaxDriver(ajaxEventsUrl);\r\n                if (this.#mode !== 'production') {\r\n                    console.log('using ServerEventsAjaxDriver', ajaxEventsUrl);\r\n                }\r\n        }\r\n\r\n        return driver;\r\n    }\r\n}","import {ServerEventsDriverFactory} from \"./driver/ServerEventsDriverFactory\";\r\n\r\n/**\r\n * Shared worker for Server Sent Events\r\n * @package Cotonti\r\n * @copyright (c) Cotonti Team\r\n * @link https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events\r\n */\r\nclass ServerSentEvents {\r\n    /**\r\n     * @type {ServerEventsAjaxDriver|ServerEventsSSEDriver|null}\r\n     */\r\n    #driver = null;\r\n\r\n    /**\r\n     * @type {string|null}\r\n     */\r\n    mode = 'production';\r\n\r\n    /**\r\n     * @type {string|null}\r\n     */\r\n    driverType = null;\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    baseUrl = '/';\r\n\r\n    /**\r\n     * @type {function|null}\r\n     */\r\n    onEvent = null;\r\n\r\n    init() {\r\n        if (this.#driver !== null) {\r\n            return;\r\n        }\r\n\r\n        if (this.mode !== 'production') {\r\n            console.log('init server events Shared worker');\r\n        }\r\n\r\n        const factory = new ServerEventsDriverFactory(this.baseUrl, this.mode);\r\n\r\n        this.#driver = factory.getByType(this.driverType);\r\n\r\n        this.#driver.addEventListener('event', (event) => {\r\n            if (typeof this.onEvent !== 'function') {\r\n                console.error(this.constructor.name + '.onEvent is not defined');\r\n            }\r\n            this.onEvent(event.detail);\r\n        });\r\n        this.#driver.init();\r\n    }\r\n}\r\n\r\n/**\r\n * @type {MessagePort[]}\r\n */\r\nconst ports = [];\r\n\r\n/**\r\n * @type {ServerSentEvents|null}\r\n */\r\nlet events = null;\r\n\r\nself.onconnect = (event) => {\r\n    const port = event.ports[0];\r\n\r\n    ports.push(port);\r\n\r\n    if (events === null) {\r\n        events = new ServerSentEvents();\r\n        events.onEvent = (event) => {\r\n            if (events.mode !== 'production') {\r\n                console.log('Shared worker postMessage', event);\r\n            }\r\n\r\n            for (const client of ports) {\r\n                client.postMessage(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    port.onmessage = (e) => {\r\n        const message = e.data;\r\n\r\n        if (message.config !== undefined) {\r\n            if (events.driverType === null) {\r\n                events.driverType = message.config.driver;\r\n            }\r\n            events.mode = message.config.mode;\r\n            events.baseUrl = message.config.baseUrl;\r\n            events.init();\r\n        }\r\n\r\n        if (events.mode !== 'production') {\r\n            console.log('Shared worker message', message);\r\n        }\r\n    }\r\n}\r\n"],"names":["BaseServerEventsDriver","EventTarget","mode","eventsUrl","constructor","super","this","init","onEventTriggered","eventData","console","log","event","CustomEvent","detail","dispatchEvent","ServerEventsSSEDriver","url","Date","now","EventSource","onopen","onmessage","JSON","parse","data","undefined","eventId","lastEventId","onerror","ServerEventsAjaxDriver","setTimeout","response","fetch","ok","Error","status","result","json","events","forEach","id","error","message","ServerEventsDriverFactory","baseUrl","getByType","driverType","driver","serverSentEventsUrl","ajaxEventsUrl","ServerSentEvents","onEvent","factory","addEventListener","name","ports","self","onconnect","port","push","client","postMessage","e","config"],"sourceRoot":""}