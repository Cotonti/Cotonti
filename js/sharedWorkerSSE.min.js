(()=>{"use strict";class e{eventsUrl=null;#e=null;onEvent=null;constructor(e,n=null){this.eventsUrl=e,null!==n&&(this.mode=n),this.init()}init(){null===this.#e&&("production"!==this.mode&&console.log("init ServerSentEventsClient"),this.#e=new EventSource(this.eventsUrl),"production"!==this.mode&&(this.#e.onopen=function(e){console.log("ServerSentEventsClient connection is open")}),this.#e.onmessage=e=>{const n=JSON.parse(e.data);void 0!==n.data&&"string"==typeof n.data&&""!==n.data&&(n.data=JSON.parse(n.data)),n.eventId=e.lastEventId,this.#n(n)},"production"!==this.mode&&(this.#e.onerror=function(e){console.log("ServerSentEventsClient connection error")}))}#n(e){"production"!==this.mode&&console.log("ServerSentEventsClient: Server triggered event",e),"function"!=typeof this.onEvent&&console.error(this.constructor.name+".onEvent is not defined"),this.onEvent(e)}}class n{#t=null;mode="production";eventsUrl=null;onEvent=null;init(){null===this.#t&&("production"!==this.mode&&console.log("init Shared worker SSE"),this.#t=new e(this.eventsUrl,this.mode),this.#t.onEvent=e=>{"function"!=typeof this.onEvent&&console.error(this.constructor.name+".onEvent is not defined"),this.onEvent(e)})}}const t=[];let o=null;self.onconnect=e=>{const s=e.ports[0];t.push(s),null===o&&(o=new n,o.onEvent=e=>{"production"!==o.mode&&console.log("Shared worker postMessage",e);for(const n of t)n.postMessage(e)}),s.onmessage=e=>{const n=e.data;void 0!==n.config&&(o.eventsUrl=n.config.url,o.mode=n.config.mode,o.init()),"production"!==o.mode&&console.log("Shared worker message",n)}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,