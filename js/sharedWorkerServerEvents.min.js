(()=>{"use strict";class e extends EventTarget{mode="production";eventsUrl=null;constructor(e,t=null){super(),null!==t&&""!==t&&(this.mode=t),this.eventsUrl=e}init(){}onEventTriggered(e){"production"!==this.mode&&console.log("ServerEventsDriver: Server triggered event",e);const t=new CustomEvent("event",{detail:e});this.dispatchEvent(t)}}class t extends e{#e=null;init(){if(null!==this.#e)return;"production"!==this.mode&&console.log("init ServerEventsSSEDriver. ",this.eventsUrl);const e=this.eventsUrl+"&ts="+Date.now();this.#e=new EventSource(e),"production"!==this.mode&&(this.#e.onopen=function(e){console.log("ServerEventsSSEDriver connection is open")}),this.#e.onmessage=e=>{const t=JSON.parse(e.data);void 0!==t.data&&"string"==typeof t.data&&""!==t.data&&(t.data=JSON.parse(t.data)),t.eventId=e.lastEventId,this.onEventTriggered(t)},"production"!==this.mode&&(this.#e.onerror=function(e){console.log("ServerEventsSSEDriver connection error")})}}class r extends e{#t=6e3;#r=null;#i=!1;init(){this.#i||(this.#i=!0,"production"!==this.mode&&console.log("init ServerEventsAjaxDriver ",this.eventsUrl),this.#r=setTimeout((()=>this.#o()),500))}async#o(){try{const e=this.eventsUrl+"&ts="+Date.now(),t=await fetch(e);if(!t.ok)throw new Error(`Response status: ${t.status}`);const r=await t.json();if(void 0!==r.error&&"driverDisabled"===r.error.code)return void("production"!==this.mode&&console.error(r.error.message));void 0!==r.events&&r.events.forEach((e=>{e.eventId=void 0!==e.id?e.id:null,this.onEventTriggered(e)})),this.#r=setTimeout((()=>this.#o()),this.#t)}catch(e){console.error("ServerEventsAjaxDriver get events error: "+e.message),this.#r=setTimeout((()=>this.#o()),this.#t)}}}class i{#n="/";#s="production";constructor(e=null,t=null){null!==e&&(this.#n=e),null!==t&&(this.#s=t)}getByType(e){let i=null;const o=this.#n+"?n=server-events&a=sse",n=this.#n+"?n=server-events&a=ajax&_ajax=1";return"sse"===e?(i=new t(o,this.#s),"production"!==this.#s&&console.log("using ServerEventsSSEDriver",o)):(i=new r(n,this.#s),"production"!==this.#s&&console.log("using ServerEventsAjaxDriver",n)),i}}class o{#d=null;#l=null;mode="production";driverType=null;baseUrl="/";onEvent=null;#v=!1;init(){if("production"!==this.mode&&(console.log("Shared worker: "),console.log("Running driver: ",this.#l),console.log("New driver: ",this.driverType)),this.#l!==this.driverType){if(!this.#v){this.#v=!0,"production"!==this.mode&&console.log("Shared worker: ServerSentEvents initialization."),null!==this.#d&&("production"!==this.mode&&console.log("Shared worker: отключаем старый драйвер: ",this.#l),this.#d=null);try{const e=new i(this.baseUrl,this.mode);this.#d=e.getByType(this.driverType),this.#l=this.driverType,this.#d.addEventListener("event",(e=>{"function"!=typeof this.onEvent&&console.error(this.constructor.name+".onEvent is not defined"),this.onEvent(e.detail)})),this.#d.init()}catch(e){console.error(e)}this.#v=!1}}else"production"!==this.mode&&console.log('Shared worker: драйвер "'+this.#l,NaN)}}const n=[];let s=null;self.onconnect=e=>{const t=e.ports[0];n.push(t),null===s&&(s=new o,s.onEvent=e=>{"production"!==s.mode&&console.log("Shared worker postMessage",e);for(const t of n)t.postMessage(e)}),t.onmessage=e=>{const t=e.data;"production"!==s.mode&&console.log("Shared worker message",t),void 0!==t.config&&s.driverType!==t.config.driver&&(s.driverType=t.config.driver,s.mode=t.config.mode,s.baseUrl=t.config.baseUrl,s.init())}}})();
//# sourceMappingURL=sharedWorkerServerEvents.min.js.map