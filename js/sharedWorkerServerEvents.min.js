(()=>{"use strict";class e extends EventTarget{mode="production";eventsUrl=null;constructor(e,n=""){super(),null!==n&&(this.mode=n),this.eventsUrl=e}init(){}onEventTriggered(e){"production"!==this.mode&&console.log("ServerEventsDriver: Server triggered event",e);const n=new CustomEvent("event",{detail:e,data:{bar:"baz"}});this.dispatchEvent(n)}}class n extends e{#e=null;init(){null===this.#e&&("production"!==this.mode&&console.log("init ServerEventsSSEDriver. ",this.eventsUrl),this.#e=new EventSource(this.eventsUrl),"production"!==this.mode&&(this.#e.onopen=function(e){console.log("ServerEventsSSEDriver connection is open")}),this.#e.onmessage=e=>{const n=JSON.parse(e.data);void 0!==n.data&&"string"==typeof n.data&&""!==n.data&&(n.data=JSON.parse(n.data)),n.eventId=e.lastEventId,this.onEventTriggered(n)},"production"!==this.mode&&(this.#e.onerror=function(e){console.log("ServerEventsSSEDriver connection error")}))}}class t extends e{}class o{#n="/";#t="production";constructor(e=null,n=null){null!==e&&(this.#n=e),null!==n&&(this.#t=n)}getByType(e){let o=null;const r=this.#n+"?n=server-events&a=sse",s=this.#n+"?n=server-events&a=ajax";return"serverSentEvents"===e?(o=new n(r),"production"!==this.#t&&console.log("using ServerEventsSSEDriver",r)):(o=new t(s),"production"!==this.#t&&console.log("using ServerEventsAjaxDriver",s)),o}}class r{#o=null;mode="production";driverType=null;baseUrl="/";onEvent=null;init(){if(null!==this.#o)return;"production"!==this.mode&&console.log("init server events Shared worker");const e=new o(this.baseUrl,this.mode);this.#o=e.getByType(this.driverType),this.#o.addEventListener("event",(e=>{"function"!=typeof this.onEvent&&console.error(this.constructor.name+".onEvent is not defined"),this.onEvent(e.detail)})),this.#o.init()}}const s=[];let i=null;self.onconnect=e=>{const n=e.ports[0];s.push(n),null===i&&(i=new r,i.onEvent=e=>{"production"!==i.mode&&console.log("Shared worker postMessage",e);for(const n of s)n.postMessage(e)}),n.onmessage=e=>{const n=e.data;void 0!==n.config&&(null===i.driverType&&(i.driverType=n.config.driver),i.mode=n.config.mode,i.baseUrl=n.config.baseUrl,i.init()),"production"!==i.mode&&console.log("Shared worker message",n)}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,