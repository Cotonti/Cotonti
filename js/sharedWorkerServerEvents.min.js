(()=>{"use strict";class e extends EventTarget{mode="production";eventsUrl=null;constructor(e,t=null){super(),null!==t&&""!==t&&(this.mode=t),this.eventsUrl=e}init(){}onEventTriggered(e){"production"!==this.mode&&console.log("ServerEventsDriver: Server triggered event",e);const t=new CustomEvent("event",{detail:e});this.dispatchEvent(t)}}class t extends e{#e=null;init(){if(null!==this.#e)return;"production"!==this.mode&&console.log("init ServerEventsSSEDriver. ",this.eventsUrl);const e=this.eventsUrl+"&ts="+Date.now();this.#e=new EventSource(e),"production"!==this.mode&&(this.#e.onopen=function(e){console.log("ServerEventsSSEDriver connection is open")}),this.#e.onmessage=e=>{const t=JSON.parse(e.data);void 0!==t.data&&"string"==typeof t.data&&""!==t.data&&(t.data=JSON.parse(t.data)),t.eventId=e.lastEventId,this.onEventTriggered(t)},"production"!==this.mode&&(this.#e.onerror=function(e){console.log("ServerEventsSSEDriver connection error")})}}class n extends e{#t=6e3;#n=null;#r=!1;init(){this.#r||(this.#r=!0,"production"!==this.mode&&console.log("init ServerEventsAjaxDriver ",this.eventsUrl),this.#n=setTimeout((()=>this.#s()),500))}async#s(){try{const e=this.eventsUrl+"&ts="+Date.now(),t=await fetch(e);if(!t.ok)throw new Error(`Response status: ${t.status}`);const n=await t.json();if(void 0!==n.error&&"driverDisabled"===n.error.code)return void("production"!==this.mode&&console.error(n.error.message));void 0!==n.events&&n.events.forEach((e=>{e.eventId=void 0!==e.id?e.id:null,this.onEventTriggered(e)})),this.#n=setTimeout((()=>this.#s()),this.#t)}catch(e){console.log("ServerEventsAjaxDriver get events error: "+e.message),this.#n=setTimeout((()=>this.#s()),this.#t)}}}class r{#o="/";#i="production";constructor(e=null,t=null){null!==e&&(this.#o=e),null!==t&&(this.#i=t)}getByType(e){let r=null;const s=this.#o+"?n=server-events&a=sse",o=this.#o+"?n=server-events&a=ajax&_ajax=1";return"sse"===e?(r=new t(s,this.#i),"production"!==this.#i&&console.log("using ServerEventsSSEDriver",s)):(r=new n(o,this.#i),"production"!==this.#i&&console.log("using ServerEventsAjaxDriver",o)),r}}class s{#d=null;#l=null;mode="production";driverType=null;baseUrl="/";onEvent=null;init(){if(null!==this.#d)return;"production"!==this.mode&&console.log("init server events Shared worker");const e=new r(this.baseUrl,this.mode);this.#d=e.getByType(this.driverType),this.#l=this.driverType,this.#d.addEventListener("event",(e=>{"function"!=typeof this.onEvent&&console.error(this.constructor.name+".onEvent is not defined"),this.onEvent(e.detail)})),this.#d.init()}}const o=[];let i=null;self.onconnect=e=>{const t=e.ports[0];o.push(t),null===i&&(i=new s,i.onEvent=e=>{"production"!==i.mode&&console.log("Shared worker postMessage",e);for(const t of o)t.postMessage(e)}),t.onmessage=e=>{const t=e.data;void 0!==t.config&&(null===i.driverType&&(i.driverType=t.config.driver),i.mode=t.config.mode,i.baseUrl=t.config.baseUrl,i.init()),"production"!==i.mode&&console.log("Shared worker message",t)}}})();
//# sourceMappingURL=sharedWorkerServerEvents.min.js.map