/**
 * @package Cotonti
 * @copyright (c) Cotonti Team
 * @license https://github.com/Cotonti/Cotonti/blob/master/License.txt
 */
(()=>{"use strict";class e extends EventTarget{mode="production";driverType="";constructor(e,t=null){super(),this.driverType=e,null!==t&&(this.mode=t),this.init()}onEventTriggered(e){"production"!==this.mode&&console.log("ServerEventsClient: Server triggered event",e);const t=new CustomEvent("event",{detail:e});this.dispatchEvent(t)}}class t extends EventTarget{mode="production";eventsUrl=null;constructor(e,t=null){super(),null!==t&&""!==t&&(this.mode=t),this.eventsUrl=e}init(){}onEventTriggered(e){"production"!==this.mode&&console.log("ServerEventsDriver: Server triggered event",e);const t=new CustomEvent("event",{detail:e});this.dispatchEvent(t)}}class n extends t{#e=null;init(){if(null!==this.#e)return;"production"!==this.mode&&console.log("init ServerEventsSSEDriver. ",this.eventsUrl);const e=this.eventsUrl+"&ts="+Date.now();this.#e=new EventSource(e),"production"!==this.mode&&(this.#e.onopen=function(e){console.log("ServerEventsSSEDriver connection is open")}),this.#e.onmessage=e=>{const t=JSON.parse(e.data);void 0!==t.data&&"string"==typeof t.data&&""!==t.data&&(t.data=JSON.parse(t.data)),t.eventId=e.lastEventId,this.onEventTriggered(t)},"production"!==this.mode&&(this.#e.onerror=function(e){console.log("ServerEventsSSEDriver connection error")})}}class s extends t{#t=6e3;#n=null;#s=!1;init(){this.#s||(this.#s=!0,"production"!==this.mode&&console.log("init ServerEventsAjaxDriver ",this.eventsUrl),this.#n=setTimeout((()=>this.#o()),500))}async#o(){try{const e=this.eventsUrl+"&ts="+Date.now(),t=await fetch(e);if(!t.ok)throw new Error(`Response status: ${t.status}`);const n=await t.json();if(void 0!==n.error&&"driverDisabled"===n.error.code)return void("production"!==this.mode&&console.error(n.error.message));void 0!==n.events&&n.events.forEach((e=>{e.eventId=void 0!==e.id?e.id:null,this.onEventTriggered(e)})),this.#n=setTimeout((()=>this.#o()),this.#t)}catch(e){console.error("ServerEventsAjaxDriver get events error: "+e.message),this.#n=setTimeout((()=>this.#o()),this.#t)}}}class o{#i="/";#r="production";constructor(e=null,t=null){null!==e&&(this.#i=e),null!==t&&(this.#r=t)}getByType(e){let t=null;const o=this.#i+"?n=server-events&a=sse",i=this.#i+"?n=server-events&a=ajax&_ajax=1";return"sse"===e?(t=new n(o,this.#r),"production"!==this.#r&&console.log("using ServerEventsSSEDriver",o)):(t=new s(i,this.#r),"production"!==this.#r&&console.log("using ServerEventsAjaxDriver",i)),t}}class i extends e{init(){"production"!==this.mode&&console.log("init ServerEventsClient");const e=new o(getBaseHref(),this.mode).getByType(this.driverType,this.mode);e.addEventListener("event",(e=>{this.onEventTriggered(e.detail)})),e.init()}}class r extends e{init(){let e="/js/sharedWorkerServerEvents.min.js?v=1";"production"!==this.mode&&console.log("init ServerEventsSharedWorkerClient: "+e);try{const t=new SharedWorker(e).port;t.postMessage({config:{mode:this.mode,driver:this.driverType,baseUrl:getBaseHref()}}),t.onmessage=e=>{"production"!==this.mode&&console.log("ServerSentEventsSharedWorker event",e.data),this.onEventTriggered(e.data)}}catch(e){console.error(e)}}}class a{mode="production";#a=null;#l="sharedWorker";#d="sse";#c=null;constructor(){this.#c=new Map,this.#d=cot.cfg.serverEvents}addObserver(e,t,n){"none"!==cot.cfg.serverEvents&&(this.#c.set(e,{name:e,event:t,onEvent:n}),null===this.#a&&this.#h())}#h(){"none"!==cot.cfg.serverEvents&&("sharedWorker"===this.#l&&void 0!==typeof SharedWorker?("production"!==this.mode&&console.log("creating ServerEventsSharedWorkerClient"),this.#a=new r(this.#d,this.mode)):("production"!==this.mode&&console.log("creating ServerEventsClient"),this.#a=new i(this.#d,this.mode)),this.#a.addEventListener("event",(e=>{this.#v(e.detail)})))}#v(e){"production"!==this.mode&&console.log("Server triggered event",e),this.#c.forEach((t=>{t.event===e.event&&"function"==typeof t.onEvent&&t.onEvent(e)}))}}class l{static containerClass="toast-container position-fixed bottom-0 end-0 p-3";title="";message="";hint="";type="";delay=5e3;#u=null;constructor(e,t="",n="",s=""){void 0!==window.bootstrap?(this.title=t,this.message=e,this.hint=n,this.type=s):console.error('Bootstrap is not found. It is required for use "Toast" component')}show(){if(null===this.#u){let e=document.getElementById("toast-container");null===e&&(e=this.#m()),this.#u=e}const e=`<strong class="me-auto">${this.title}</strong>`,t=""!==this.hint?`<small>${this.hint}</small>`:"",n=`<div class="toast${""!==this.type?` text-bg-${this.type}`:""}" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="${this.delay}"><div class="toast-header">${e}${t}<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button></div><div class="toast-body">${this.message}</div></div>`,s=document.createElement("div");s.innerHTML=n;const o=s.firstElementChild;this.#u.appendChild(o),new window.bootstrap.Toast(o).show(),this.#u.lastElementChild.addEventListener("hidden.bs.toast",(()=>{o.remove(),""===this.#u.innerHTML&&(this.#u.remove(),this.#u=null)}))}#m(){const e=document.createElement("div");return e.id="toast-container",e.className=l.containerClass,document.body.append(e),e}}class d{title="";content="";buttons=null;centered=!1;dialogClass="modal-dialog";#p=null;constructor(e,t="",n=null){void 0!==window.bootstrap?(this.title=t,this.content=e,this.buttons=n):console.error('Bootstrap is not found. It is required for use "Modal" component')}show(){let e=this.dialogClass;this.centered&&(e+=" modal-dialog-centered");const t=`<div class="modal fade" id="CotontiDynamicModal" tabindex="-1" aria-labelledby="CotontiDynamicModalLabel" aria-hidden="true"><div class="${e}"><div class="modal-content"><div class="modal-header"><h5 class="modal-title" id="CotontiDynamicModalLabel">${this.title}</h5><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button></div><div class="modal-body">${this.content}</div><div class="modal-footer"></div></div></div></div>`,n=document.createElement("div");n.innerHTML=t,this.#p=n.firstElementChild,this.#g(),document.body.appendChild(this.#p),new bootstrap.Modal(this.#p).show(),this.#p.addEventListener("hidden.bs.modal",(()=>{this.#p.remove()}))}#g(){const e=this.#y();if(""===e||e===[])return;const t=this.#p.querySelector(".modal-footer");"string"!=typeof e?Array.isArray(e)&&e.forEach((e=>{"string"!=typeof e?t.appendChild(e):t.innerHTML+=e})):t.innerHTML=e}#y(){const e=[];let t=this.buttons;return t===[]?e:null===t?'<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>':"string"==typeof t?t:(Array.isArray(t)&&t.forEach((t=>{if("string"==typeof t)return void e.push(t);const n=document.createElement("button");void 0!==t.label&&(n.innerHTML=t.label),n.setAttribute("type",void 0!==t.btnType?t.btnType:"button"),n.classList.add("btn"),void 0!==t.type&&n.classList.add("btn-"+t.type),void 0!==t.closeOnClick&&!0===t.closeOnClick&&n.setAttribute("data-bs-dismiss","modal"),void 0!==t.onClick&&"function"==typeof t.onClick&&n.addEventListener("click",(e=>t.onClick(e))),e.push(n)})),e)}}window.cot=new class{cfg={};L={};#E=null;init(e){void 0!==e.config&&(this.cfg=e.config),void 0!==e.lang&&(this.L=e.lang),this.#b()}#b(){if(void 0===window.jQuery||void 0===window.jQuery.fn.select2)return;const e=document.querySelectorAll(".select2");0!==e.length&&e.forEach((e=>{void 0===e.dataset.inited&&($(e).select2(),e.dataset.inited="true")}))}getServerEvents(){return null===this.#E&&(this.#E=new a),this.#E}confirm(e,t,n,s="Ok",o="Cancel"){this.modal(e,t,[{label:s,onClick:e=>n(e),type:"primary",closeOnClick:!0},{label:o,closeOnClick:!0,type:"secondary"}])}getModal(e,t="",n=null){return new d(e,t,n)}modal(e,t="",n=null){const s=this.getModal(e,t,n);return s.show(),s}getToast(e,t="",n="",s=""){return new l(e,t,n,s)}toast(e,t="",n="",s="",o=5e3){const i=this.getToast(e,t,n,s);return null!==o&&(i.delay=o),i.show(),i}async loadData(e){if(!e)return{};void 0===this.loadedData&&(this.loadedData={});let t=[];("string"==typeof e||e instanceof String)&&(e=[e]);for(let n of e)n in this.loadedData||t.push(n);if(t.length>0){let e=new URLSearchParams({n:"main",a:"get"});t.forEach(((t,n,s)=>{e.append("data["+n+"]",t)})),e.append("_ajax",1);try{let t=await fetch("index.php?"+e.toString());if(t.ok){const e=await t.json();if(e.success)for(const t in e.data)this.loadedData[t]=e.data[t]}}catch(e){}}let n={};for(let t of e)t in this.loadedData&&(n[t]=this.loadedData[t]);return n}loadCaptcha(){this.loadData(["captcha","x"]).then((e=>{let t=document.querySelectorAll(".captcha-place-holder");for(let n of t){n.innerHTML=e.captcha,this.executeScriptElements(n),n.classList.remove("captcha-place-holder","loading"),n.classList.add("captcha");const t=n.closest("form");if(null!==t){let n=t.querySelector('input[type="hidden"][name="x"]');null!==n&&n.setAttribute("value",e.x)}}}))}executeScriptElements(e){const t=e.querySelectorAll("script");Array.from(t).forEach((e=>{const t=document.createElement("script");Array.from(e.attributes).forEach((e=>{t.setAttribute(e.name,e.value)})),t.text=e.text,e.parentNode.replaceChild(t,e)}))}}})();

function encodeURIfix(str) {
	// to prevent twice encoding
	// and fix '[',']' signs to follow RFC3986 (section-3.2.2)
	return encodeURI(decodeURI(str)).replace(/%5B/g, '[').replace(/%5D/g, ']');
}

function getBaseHref() {
	var href = document.getElementsByTagName('base')[0].href;
	if (href == null) {
		return '/';
	} else {
		return href;
	}
}

function popup(code, w, h){
    window.open(getBaseHref() + 'index.php?o=' + code, '', 'toolbar=0,location=0,directories=0,menuBar=0,resizable=0,scrollbars=yes,width=' + w + ',height=' + h + ',left=32,top=16');
}

/**
 * @todo move to pfs module
 */
function pfs(id, c1, c2, parser){
    window.open(
		getBaseHref() + 'index.php?e=pfs&userid=' + id + '&c1=' + c1 + '&c2=' + c2 + '&parser=' + parser,
		'PFS',
		'status=1, toolbar=0,location=0,directories=0,menuBar=0,resizable=1,scrollbars=yes,width=754,height=512,left=32,top=16'
	);
}

function redirect(url){
    location.href = url.options[url.selectedIndex].value;
}

function toggleblock(id){
    var bl = document.getElementById(id);
    if (bl.style.display == 'none') {
        bl.style.display = '';
    }
    else {
        bl.style.display = 'none';
    }
	return false;
}

function toggleAll(action) {
	var blks = document.querySelectorAll('[id^="blk_"]');
	for (i = 0; i < blks.length; i++) {
		if (action == 'hide') {
			blks[i].style.display = 'none';
		} else if (action == 'show') {
			blks[i].style.display = 'table-row-group';
		}
	}
	return false;
}

// Inserts text into textarea at cursor position
function insertText(docObj, fieldName, value) {
	var field = null;
	if (!docObj) {
		docObj = document;
	}
	// Find the field in the docObj
	findField:
	for (var i = 0; i < docObj.forms.length; i++) {
		for (var j = 0; j < docObj.forms[i].elements.length; j++) {
			if (docObj.forms[i].elements[j].name == fieldName) {
				field = docObj.forms[i].elements[j];
				break findField;
			}
		}
	}
	if (!field) {
		return false;
	}

	// Insert the text
	if (docObj.selection) {
		// MSIE and Opera
		field.focus();
		var sel = docObj.selection.createRange();
		sel.text = value;
	} else if (field.selectionStart || field.selectionStart == 0) {
		// Mozilla
		var startPos = field.selectionStart;
		var endPos = field.selectionEnd;
		field.value = field.value.substring(0, startPos) + value + field.value.substring(endPos, field.value.length);
	} else {
		field.value += value;
	}
	return true;
}

// Array of ajax error handlers
// Example of use:
// ajaxErrorHandlers.push({func: myErrorHandler});
// ajaxSuccessHandlers.push({func: mySuccessHandler});
var ajaxErrorHandlers = new Array();
var ajaxSuccessHandlers = new Array();
// AJAX enablement defaults to false
var ajaxEnabled = false;
// Required to calculate paths
if (typeof jQuery != 'undefined') {
	var ajaxCurrentBase = location.href.replace($('base').eq(0).attr('href'), '').replace(/\?.*$/, '').replace(/#.*$/, '');
}
// This flag indicates that AJAX+history has been used on this page
// It means that "#" or home link should be loaded via ajax too
var ajaxUsed = false;
// Global flag to let everybody know that AJAX has failed
var ajaxError = false;

/**
 * AJAX helper function
 * @param {hash} settings A hashtable with settings
 * @return FALSE on successful AJAX call, TRUE on error to continue in
 * synchronous mode
 * @type bool
 */
function ajaxSend(settings) {
	var method = settings.method ? settings.method.toUpperCase() : 'GET';
	var data = settings.data || '';
	var url = settings.url || $('#' + settings.formId).attr('action');
	if (method === 'POST') {
		data += '&' + $('#' + settings.formId).serialize();
	} else if (settings.formId) {
		var sep = url.indexOf('?') > 0 ? '&' : '?';
		url += sep + $('#' + settings.formId).serialize();
	}
	$.ajax({
		type: method,
		url: encodeURIfix(url),
		data: data,
		beforeSend: function() {
			if (!settings.nonshowloading) {
				$('#' + settings.divId)
					.append('<span style="position:absolute; left:' + ($('#' + settings.divId).width()/2 - 110) + 'px;top:' + ($('#' + settings.divId).height()/2 - 9) + 'px;" class="loading" id="loading"><img src="./images/spinner.gif" alt="loading"/></span>').css('position', 'relative');
			}
		},
		success: function(msg) {
			if (!settings.nonshowloading) {
				$('#loading').remove();
			}
			if (!settings.nonshowfadein) {
				$('#' + settings.divId).hide().html(msg).fadeIn(500);
			} else {
				$('#' + settings.divId).html(msg);
			}
			for (var i = 0; i < ajaxSuccessHandlers.length; i++) {
				if(ajaxSuccessHandlers[i].func)
					ajaxSuccessHandlers[i].func(msg);
				else
					ajaxSuccessHandlers[i](msg);
			}
		},
		error: function(msg) {
			if (!settings.nonshowloading) {
				$('#loading').remove();
			}
			if (!settings.nonshowfadein) {
				$('#' + settings.divId).hide().html(msg).fadeIn(500);
			} else {
				$('#' + settings.divId).html(msg);
			}
			if (ajaxErrorHandlers.length > 0) {
				for (var i = 0; i < ajaxErrorHandlers.length; i++) {
					if (ajaxErrorHandlers[i].func) {
						ajaxErrorHandlers[i].func(msg);
					} else {
						ajaxErrorHandlers[i](msg);
					}
				}
			} else {
				alert('AJAX error: ' + msg);
				ajaxError = true;
			}
		}
	});
	return false;
}

/**
 * AJAX subpage loader with history support
 * @param {string} hash A hash-address string
 * @return FALSE on successful AJAX call, TRUE on error to continue in
 * synchronous mode
 * @type bool
 */
function ajaxPageLoad(hash) {
    if (hash !== '') {
		hash.replace(/^#/, '');
	}
	var m = hash.match(/^get(-.*?)?;(.*)$/);
	if (m) {
		// ajax bookmark
        var url = m[2].indexOf(';') > 0 ? m[2].replace(';', '?') : ajaxCurrentBase + '?' + decodeURIComponent(m[2]);
		ajaxUsed = true;
		return ajaxSend({
			method: 'GET',
			url: url,
			divId: m[1] ? m[1].substr(1) : 'ajaxBlock'
		});
	} else if (hash === '' && ajaxUsed) {
		// ajax home
		return ajaxSend ({
			url: location.href.replace(/#.*$/, ''),
			divId: 'ajaxBlock'
		});
	}
	return true;
}

/**
 * AJAX subform loader without history tracking
 * @param {string} hash A hash-address string
 * @param {string} formId Target form id attribute
 * @return FALSE on successful AJAX call, TRUE on error to continue in
 * synchronous mode
 * @type bool
 */
function ajaxFormLoad(hash, formId) {
	var m = hash.match(/^(get|post)(-.*?)?;(.*)$/);
	if (m) {
		// ajax bookmark
		var url = m[3].indexOf(';') > 0 ? m[3].replace(';', '?') : ajaxCurrentBase + '?' + m[3];
		ajaxUsed = true;
		return ajaxSend({
			method: m[1].toUpperCase(),
			url: url,
			divId: m[2] ? m[2].substr(1) : 'ajaxBlock',
			formId: formId
		});
	}
	return true;
}

/**
 * Constructs ajaxable hash string
 * @param {string} href Link href or form action attribute
 * @param {string} rel An attribute value possibly containing a hash address
 * @param {string} formData Is passed for forms only, is 'post' for POST forms
 * or serialized form data for GET forms
 * @return A valid hash-address string
 * @type string
 */
function ajaxMakeHash(href, rel, formData) {
	var hash = (formData == 'post') ? 'post' : 'get';
	var hrefBase, params;
	var sep = '?';
	var m = rel ? rel.match(/(get|post)(-[^ ;]+)?(;\S*)?/) : false;
	if (m) {
		hash = m[1];
		if (m[2]) {
			hash += m[2];
		}
		if (m[3]) {
			href = m[3].substr(1);
			sep  = ';';
		}
	}
	hash += ';'
	if (href.indexOf(sep) > 0) {
		hrefBase = href.substr(0, href.indexOf(sep));
		params = href.substr(href.indexOf(sep) + 1);
		if (formData && formData != 'post') {
			params += '&' + formData;
		}
	} else {
		hrefBase = href;
		params = '';
		if (formData && formData != 'post') {
			params += sep + formData;
		}
	}
	hash += hrefBase == ajaxCurrentBase ? params : hrefBase + ';' + params;
	return hash;
}

/**
 * Standard event bindings
 */
function bindHandlers() {
	if (location.hash == '#comments' || location.hash.match(/#c\d+/)) {
		$('.comments').css('display', '');
	}
	$('.comments_link').click(function() {
		if($('.comments').css('display') == 'none') {
			$('.comments').css('display', '');
		} else {
			$('.comments').css('display', 'none');
		}
	});

	if(location.href.match(/#comments/)) {
		$('.comments').css('display', '');
	}

	if (ajaxEnabled) {
		// AJAX auto-handling
		$('body').on('submit', 'form.ajax', function() {
			if ($(this).attr('method').toUpperCase() == 'POST') {
				ajaxFormLoad(ajaxMakeHash($(this).attr('action').replace(/#.*$/, ''), $(this).attr('class'), 'post'), $(this).attr('id'));
			} else {
				window.location.hash = ajaxMakeHash($(this).attr('action').replace(/#.*$/, ''), $(this).attr('class'), $(this).serialize());
			}
			return ajaxError;
		});
		$('body').on('click', 'a.ajax', function() {
			window.location.hash = ajaxMakeHash($(this).attr('href').replace(/#.*$/, ''), $(this).attr('rel'));
			return ajaxError;
		});

		// AJAX action confirmations
		$('body').on('click', 'a.confirmLink', function() {
			if ($(this).attr('href').match(/message.+920/i)) {
				if ($('#confirmBox')) {
					$('#confirmBox').remove();
				}
				$('body').prepend('<div id="confirmBox" class="jqmWindow"></div>');
				$('#confirmBox').jqm({ajax:$(this).attr('href'),modal:true,onLoad:function(){
					$('#confirmBox').css('margin-left', '-'+($('#confirmBox').width()/2)+'px');
					$('#confirmBox').css('margin-top', '-'+($('#confirmBox').height()/2)+'px');
				}});
				$('#confirmBox').jqmShow();
				return false;
			} else {
				return true;
			}
		});

		// Listen to hash change events
		$(window).on('hashchange', function() {
			ajaxPageLoad(window.location.hash.replace(/^#/, ''));
		});

		$('body').on('click', 'a#confirmNo', function() {
			if ($("#confirmBox").is(".jqmWindow"))
			{
				$('#confirmBox').jqmHide();
				$('#confirmBox').remove();
				return false;
			}
			else
			{
				return true;
			}
		});
	}
}

if (typeof jQuery != 'undefined') {
    $(document).ready(function() {
        // If page was loaded with hash
        if (ajaxEnabled) {
            if(window.location.hash != '') {
                ajaxPageLoad(window.location.hash.replace(/^#/, ''));
            }
        }

        bindHandlers();
    });
}

window.name = 'main';//# sourceMappingURL=data:application/json;charset=utf-8;base64,
