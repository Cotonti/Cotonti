/**
 * @package Cotonti
 * @copyright (c) Cotonti Team
 * @license https://github.com/Cotonti/Cotonti/blob/master/License.txt
 */
(()=>{"use strict";class t{eventsUrl=null;#t=null;onEvent=null;constructor(t,e=null){this.eventsUrl=t,null!==e&&(this.mode=e),this.init()}init(){null===this.#t&&("production"!==this.mode&&console.log("init ServerSentEventsClient"),this.#t=new EventSource(this.eventsUrl),"production"!==this.mode&&(this.#t.onopen=function(t){console.log("ServerSentEventsClient connection is open")}),this.#t.onmessage=t=>{const e=JSON.parse(t.data);void 0!==e.data&&"string"==typeof e.data&&""!==e.data&&(e.data=JSON.parse(e.data)),e.eventId=t.lastEventId,this.#e(e)},"production"!==this.mode&&(this.#t.onerror=function(t){console.log("ServerSentEventsClient connection error")}))}#e(t){"production"!==this.mode&&console.log("ServerSentEventsClient: Server triggered event",t),"function"!=typeof this.onEvent&&console.error(this.constructor.name+".onEvent is not defined"),this.onEvent(t)}}class e{eventsUrl=null;#n=null;onEvent=null;mode="production";constructor(t,e=null){this.eventsUrl=t,null!==e&&(this.mode=e),this.init()}init(){null===this.#n&&("production"!==this.mode&&console.log("init ServerSentEvents driver"),this.#n=new t(this.eventsUrl,this.mode),this.#n.onEvent=t=>{this.onEventTriggered(t)})}onEventTriggered(t){"function"!=typeof this.onEvent&&console.error(this.constructor.name+".onEvent is not defined"),this.onEvent(t)}}class n extends e{init(){"production"!==this.mode&&console.log("init ServerSentEventsSharedWorker driver");try{const t=new SharedWorker("/js/sharedWorkerSSE.min.js").port;t.postMessage({config:{url:this.eventsUrl,mode:this.mode}}),t.onmessage=t=>{"production"!==this.mode&&console.log("ServerSentEventsSharedWorker event",t.data),this.onEventTriggered(t.data)}}catch(t){console.error(t)}}}class o{#o=null;#s=null;mode="production";constructor(){this.#s=new Map}addObserver(t,e,n){this.#s.set(t,{name:t,event:e,onEvent:n}),null===this.#o&&this.#i()}#i(){const t=getBaseHref()+"index.php?n=server-events";void 0!==typeof SharedWorker?("production"!==this.mode&&console.log("creating ServerSentEventsSharedWorker driver"),this.#o=new n(t,this.mode)):("production"!==this.mode&&console.log("creating ServerSentEvents driver"),this.#o=new e(t,this.mode)),this.#o.onEvent=t=>{this.#r(t)},this.#o.mode=this.mode}#r(t){"production"!==this.mode&&console.log("Server triggered event",t),this.#s.forEach((e=>{e.event===t.event&&"function"==typeof e.onEvent&&e.onEvent(t)}))}}class s{static containerClass="toast-container position-fixed bottom-0 end-0 p-3";title="";message="";hint="";type="";delay=5e3;#a=null;constructor(t,e="",n="",o=""){void 0!==window.bootstrap?(this.title=e,this.message=t,this.hint=n,this.type=o):console.error('Bootstrap is not found. It is required for use "Toast" component')}show(){if(null===this.#a){let t=document.getElementById("toast-container");null===t&&(t=this.#l()),this.#a=t}const t=`<strong class="me-auto">${this.title}</strong>`,e=""!==this.hint?`<small>${this.hint}</small>`:"",n=`<div class="toast${""!==this.type?` text-bg-${this.type}`:""}" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="${this.delay}"><div class="toast-header">${t}${e}<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button></div><div class="toast-body">${this.message}</div></div>`,o=document.createElement("div");o.innerHTML=n;const s=o.firstElementChild;this.#a.appendChild(s),new window.bootstrap.Toast(s).show(),this.#a.lastElementChild.addEventListener("hidden.bs.toast",(()=>{s.remove(),""===this.#a.innerHTML&&(this.#a.remove(),this.#a=null)}))}#l(){const t=document.createElement("div");return t.id="toast-container",t.className=s.containerClass,document.body.append(t),t}}class i{title="";content="";buttons=null;centered=!1;dialogClass="modal-dialog";#d=null;constructor(t,e="",n=null){void 0!==window.bootstrap?(this.title=e,this.content=t,this.buttons=n):console.error('Bootstrap is not found. It is required for use "Modal" component')}show(){let t=this.dialogClass;this.centered&&(t+=" modal-dialog-centered");const e=`<div class="modal fade" id="CotontiDynamicModal" tabindex="-1" aria-labelledby="CotontiDynamicModalLabel" aria-hidden="true"><div class="${t}"><div class="modal-content"><div class="modal-header"><h5 class="modal-title" id="CotontiDynamicModalLabel">${this.title}</h5><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button></div><div class="modal-body">${this.content}</div><div class="modal-footer"></div></div></div></div>`,n=document.createElement("div");n.innerHTML=e,this.#d=n.firstElementChild,this.#c(),document.body.appendChild(this.#d),new bootstrap.Modal(this.#d).show(),this.#d.addEventListener("hidden.bs.modal",(()=>{this.#d.remove()}))}#c(){const t=this.#h();if(""===t||t===[])return;const e=this.#d.querySelector(".modal-footer");"string"!=typeof t?Array.isArray(t)&&t.forEach((t=>{"string"!=typeof t?e.appendChild(t):e.innerHTML+=t})):e.innerHTML=t}#h(){const t=[];let e=this.buttons;return e===[]?t:null===e?'<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>':"string"==typeof e?e:(Array.isArray(e)&&e.forEach((e=>{if("string"==typeof e)return void t.push(e);const n=document.createElement("button");void 0!==e.label&&(n.innerHTML=e.label),n.setAttribute("type",void 0!==e.btnType?e.btnType:"button"),n.classList.add("btn"),void 0!==e.type&&n.classList.add("btn-"+e.type),void 0!==e.closeOnClick&&!0===e.closeOnClick&&n.setAttribute("data-bs-dismiss","modal"),void 0!==e.onClick&&"function"==typeof e.onClick&&n.addEventListener("click",(t=>e.onClick(t))),t.push(n)})),t)}}window.cot=new class{#v=null;getServerEvents(){return null===this.#v&&(this.#v=new o),this.#v}confirm(t,e,n,o="Ok",s="Cancel"){this.modal(t,e,[{label:o,onClick:t=>n(t),type:"primary",closeOnClick:!0},{label:s,closeOnClick:!0,type:"secondary"}])}getModal(t,e="",n=null){return new i(t,e,n)}modal(t,e="",n=null){const o=this.getModal(t,e,n);return o.show(),o}getToast(t,e="",n="",o=""){return new s(t,e,n,o)}toast(t,e="",n="",o="",s=5e3){const i=this.getToast(t,e,n,o);return null!==s&&(i.delay=s),i.show(),i}async loadData(t){if(!t)return{};void 0===this.loadedData&&(this.loadedData={});let e=[];("string"==typeof t||t instanceof String)&&(t=[t]);for(let n of t)n in this.loadedData||e.push(n);if(e.length>0){let t=new URLSearchParams({n:"main",a:"get"});e.forEach(((e,n,o)=>{t.append("data["+n+"]",e)})),t.append("_ajax",1);try{let e=await fetch("index.php?"+t.toString());if(e.ok){const t=await e.json();if(t.success)for(const e in t.data)this.loadedData[e]=t.data[e]}}catch(t){}}let n={};for(let e of t)e in this.loadedData&&(n[e]=this.loadedData[e]);return n}loadCaptcha(){this.loadData(["captcha","x"]).then((t=>{let e=document.querySelectorAll(".captcha-place-holder");for(let n of e){n.innerHTML=t.captcha,this.executeScriptElements(n),n.classList.remove("captcha-place-holder","loading"),n.classList.add("captcha");const e=n.closest("form");if(null!==e){let n=e.querySelector('input[type="hidden"][name="x"]');null!==n&&n.setAttribute("value",t.x)}}}))}executeScriptElements(t){const e=t.querySelectorAll("script");Array.from(e).forEach((t=>{const e=document.createElement("script");Array.from(t.attributes).forEach((t=>{e.setAttribute(t.name,t.value)})),e.text=t.text,t.parentNode.replaceChild(e,t)}))}}})();

function encodeURIfix(str) {
	// to prevent twice encoding
	// and fix '[',']' signs to follow RFC3986 (section-3.2.2)
	return encodeURI(decodeURI(str)).replace(/%5B/g, '[').replace(/%5D/g, ']');
}

function getBaseHref() {
	var href = document.getElementsByTagName('base')[0].href;
	if (href == null) {
		return '/';
	} else {
		return href;
	}
}

function popup(code, w, h){
    window.open(getBaseHref() + 'index.php?o=' + code, '', 'toolbar=0,location=0,directories=0,menuBar=0,resizable=0,scrollbars=yes,width=' + w + ',height=' + h + ',left=32,top=16');
}

/**
 * @todo move to pfs module
 */
function pfs(id, c1, c2, parser){
    window.open(
		getBaseHref() + 'index.php?e=pfs&userid=' + id + '&c1=' + c1 + '&c2=' + c2 + '&parser=' + parser,
		'PFS',
		'status=1, toolbar=0,location=0,directories=0,menuBar=0,resizable=1,scrollbars=yes,width=754,height=512,left=32,top=16'
	);
}

function redirect(url){
    location.href = url.options[url.selectedIndex].value;
}

function toggleblock(id){
    var bl = document.getElementById(id);
    if (bl.style.display == 'none') {
        bl.style.display = '';
    }
    else {
        bl.style.display = 'none';
    }
	return false;
}

function toggleAll(action) {
	var blks = document.querySelectorAll('[id^="blk_"]');
	for (i = 0; i < blks.length; i++) {
		if (action == 'hide') {
			blks[i].style.display = 'none';
		} else if (action == 'show') {
			blks[i].style.display = 'table-row-group';
		}
	}
	return false;
}

// Inserts text into textarea at cursor position
function insertText(docObj, fieldName, value) {
	var field = null;
	if (!docObj) {
		docObj = document;
	}
	// Find the field in the docObj
	findField:
	for (var i = 0; i < docObj.forms.length; i++) {
		for (var j = 0; j < docObj.forms[i].elements.length; j++) {
			if (docObj.forms[i].elements[j].name == fieldName) {
				field = docObj.forms[i].elements[j];
				break findField;
			}
		}
	}
	if (!field) {
		return false;
	}

	// Insert the text
	if (docObj.selection) {
		// MSIE and Opera
		field.focus();
		var sel = docObj.selection.createRange();
		sel.text = value;
	} else if (field.selectionStart || field.selectionStart == 0) {
		// Mozilla
		var startPos = field.selectionStart;
		var endPos = field.selectionEnd;
		field.value = field.value.substring(0, startPos) + value + field.value.substring(endPos, field.value.length);
	} else {
		field.value += value;
	}
	return true;
}

// Array of ajax error handlers
// Example of use:
// ajaxErrorHandlers.push({func: myErrorHandler});
// ajaxSuccessHandlers.push({func: mySuccessHandler});
var ajaxErrorHandlers = new Array();
var ajaxSuccessHandlers = new Array();
// AJAX enablement defaults to false
var ajaxEnabled = false;
// Required to calculate paths
if (typeof jQuery != 'undefined') {
	var ajaxCurrentBase = location.href.replace($('base').eq(0).attr('href'), '').replace(/\?.*$/, '').replace(/#.*$/, '');
}
// This flag indicates that AJAX+history has been used on this page
// It means that "#" or home link should be loaded via ajax too
var ajaxUsed = false;
// Global flag to let everybody know that AJAX has failed
var ajaxError = false;

/**
 * AJAX helper function
 * @param {hash} settings A hashtable with settings
 * @return FALSE on successful AJAX call, TRUE on error to continue in
 * synchronous mode
 * @type bool
 */
function ajaxSend(settings) {
	var method = settings.method ? settings.method.toUpperCase() : 'GET';
	var data = settings.data || '';
	var url = settings.url || $('#' + settings.formId).attr('action');
	if (method === 'POST') {
		data += '&' + $('#' + settings.formId).serialize();
	} else if (settings.formId) {
		var sep = url.indexOf('?') > 0 ? '&' : '?';
		url += sep + $('#' + settings.formId).serialize();
	}
	$.ajax({
		type: method,
		url: encodeURIfix(url),
		data: data,
		beforeSend: function() {
			if (!settings.nonshowloading) {
				$('#' + settings.divId)
					.append('<span style="position:absolute; left:' + ($('#' + settings.divId).width()/2 - 110) + 'px;top:' + ($('#' + settings.divId).height()/2 - 9) + 'px;" class="loading" id="loading"><img src="./images/spinner.gif" alt="loading"/></span>').css('position', 'relative');
			}
		},
		success: function(msg) {
			if (!settings.nonshowloading) {
				$('#loading').remove();
			}
			if (!settings.nonshowfadein) {
				$('#' + settings.divId).hide().html(msg).fadeIn(500);
			} else {
				$('#' + settings.divId).html(msg);
			}
			for (var i = 0; i < ajaxSuccessHandlers.length; i++) {
				if(ajaxSuccessHandlers[i].func)
					ajaxSuccessHandlers[i].func(msg);
				else
					ajaxSuccessHandlers[i](msg);
			}
		},
		error: function(msg) {
			if (!settings.nonshowloading) {
				$('#loading').remove();
			}
			if (!settings.nonshowfadein) {
				$('#' + settings.divId).hide().html(msg).fadeIn(500);
			} else {
				$('#' + settings.divId).html(msg);
			}
			if (ajaxErrorHandlers.length > 0) {
				for (var i = 0; i < ajaxErrorHandlers.length; i++) {
					if (ajaxErrorHandlers[i].func) {
						ajaxErrorHandlers[i].func(msg);
					} else {
						ajaxErrorHandlers[i](msg);
					}
				}
			} else {
				alert('AJAX error: ' + msg);
				ajaxError = true;
			}
		}
	});
	return false;
}

/**
 * AJAX subpage loader with history support
 * @param {string} hash A hash-address string
 * @return FALSE on successful AJAX call, TRUE on error to continue in
 * synchronous mode
 * @type bool
 */
function ajaxPageLoad(hash) {
    if (hash !== '') {
		hash.replace(/^#/, '');
	}
	var m = hash.match(/^get(-.*?)?;(.*)$/);
	if (m) {
		// ajax bookmark
        var url = m[2].indexOf(';') > 0 ? m[2].replace(';', '?') : ajaxCurrentBase + '?' + decodeURIComponent(m[2]);
		ajaxUsed = true;
		return ajaxSend({
			method: 'GET',
			url: url,
			divId: m[1] ? m[1].substr(1) : 'ajaxBlock'
		});
	} else if (hash === '' && ajaxUsed) {
		// ajax home
		return ajaxSend ({
			url: location.href.replace(/#.*$/, ''),
			divId: 'ajaxBlock'
		});
	}
	return true;
}

/**
 * AJAX subform loader without history tracking
 * @param {string} hash A hash-address string
 * @param {string} formId Target form id attribute
 * @return FALSE on successful AJAX call, TRUE on error to continue in
 * synchronous mode
 * @type bool
 */
function ajaxFormLoad(hash, formId) {
	var m = hash.match(/^(get|post)(-.*?)?;(.*)$/);
	if (m) {
		// ajax bookmark
		var url = m[3].indexOf(';') > 0 ? m[3].replace(';', '?') : ajaxCurrentBase + '?' + m[3];
		ajaxUsed = true;
		return ajaxSend({
			method: m[1].toUpperCase(),
			url: url,
			divId: m[2] ? m[2].substr(1) : 'ajaxBlock',
			formId: formId
		});
	}
	return true;
}

/**
 * Constructs ajaxable hash string
 * @param {string} href Link href or form action attribute
 * @param {string} rel An attribute value possibly containing a hash address
 * @param {string} formData Is passed for forms only, is 'post' for POST forms
 * or serialized form data for GET forms
 * @return A valid hash-address string
 * @type string
 */
function ajaxMakeHash(href, rel, formData) {
	var hash = (formData == 'post') ? 'post' : 'get';
	var hrefBase, params;
	var sep = '?';
	var m = rel ? rel.match(/(get|post)(-[^ ;]+)?(;\S*)?/) : false;
	if (m) {
		hash = m[1];
		if (m[2]) {
			hash += m[2];
		}
		if (m[3]) {
			href = m[3].substr(1);
			sep  = ';';
		}
	}
	hash += ';'
	if (href.indexOf(sep) > 0) {
		hrefBase = href.substr(0, href.indexOf(sep));
		params = href.substr(href.indexOf(sep) + 1);
		if (formData && formData != 'post') {
			params += '&' + formData;
		}
	} else {
		hrefBase = href;
		params = '';
		if (formData && formData != 'post') {
			params += sep + formData;
		}
	}
	hash += hrefBase == ajaxCurrentBase ? params : hrefBase + ';' + params;
	return hash;
}

/**
 * Standard event bindings
 */
function bindHandlers() {
	if (location.hash == '#comments' || location.hash.match(/#c\d+/)) {
		$('.comments').css('display', '');
	}
	$('.comments_link').click(function() {
		if($('.comments').css('display') == 'none') {
			$('.comments').css('display', '');
		} else {
			$('.comments').css('display', 'none');
		}
	});

	if(location.href.match(/#comments/)) {
		$('.comments').css('display', '');
	}

	if (ajaxEnabled) {
		// AJAX auto-handling
		$('body').on('submit', 'form.ajax', function() {
			if ($(this).attr('method').toUpperCase() == 'POST') {
				ajaxFormLoad(ajaxMakeHash($(this).attr('action').replace(/#.*$/, ''), $(this).attr('class'), 'post'), $(this).attr('id'));
			} else {
				window.location.hash = ajaxMakeHash($(this).attr('action').replace(/#.*$/, ''), $(this).attr('class'), $(this).serialize());
			}
			return ajaxError;
		});
		$('body').on('click', 'a.ajax', function() {
			window.location.hash = ajaxMakeHash($(this).attr('href').replace(/#.*$/, ''), $(this).attr('rel'));
			return ajaxError;
		});

		// AJAX action confirmations
		$('body').on('click', 'a.confirmLink', function() {
			if ($(this).attr('href').match(/message.+920/i)) {
				if ($('#confirmBox')) {
					$('#confirmBox').remove();
				}
				$('body').prepend('<div id="confirmBox" class="jqmWindow"></div>');
				$('#confirmBox').jqm({ajax:$(this).attr('href'),modal:true,onLoad:function(){
					$('#confirmBox').css('margin-left', '-'+($('#confirmBox').width()/2)+'px');
					$('#confirmBox').css('margin-top', '-'+($('#confirmBox').height()/2)+'px');
				}});
				$('#confirmBox').jqmShow();
				return false;
			} else {
				return true;
			}
		});

		// Listen to hash change events
		$(window).on('hashchange', function() {
			ajaxPageLoad(window.location.hash.replace(/^#/, ''));
		});

		$('body').on('click', 'a#confirmNo', function() {
			if ($("#confirmBox").is(".jqmWindow"))
			{
				$('#confirmBox').jqmHide();
				$('#confirmBox').remove();
				return false;
			}
			else
			{
				return true;
			}
		});
	}
}

if (typeof jQuery != 'undefined') {
    $(document).ready(function() {
        // If page was loaded with hash
        if (ajaxEnabled) {
            if(window.location.hash != '') {
                ajaxPageLoad(window.location.hash.replace(/^#/, ''));
            }
        }

        bindHandlers();
    });
}

window.name = 'main';//# sourceMappingURL=data:application/json;charset=utf-8;base64,
