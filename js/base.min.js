/**
 * @package Cotonti
 * @copyright (c) Cotonti Team
 * @license https://github.com/Cotonti/Cotonti/blob/master/License.txt
 */
function encodeURIfix(e){return encodeURI(decodeURI(e)).replace(/%5B/g,"[").replace(/%5D/g,"]")}function getBaseHref(){var e=document.getElementsByTagName("base")[0].href;return null==e?"/":e}function popup(e,t,n){window.open(getBaseHref()+"index.php?o="+e,"","toolbar=0,location=0,directories=0,menuBar=0,resizable=0,scrollbars=yes,width="+t+",height="+n+",left=32,top=16")}function pfs(e,t,n,o){window.open(getBaseHref()+"index.php?e=pfs&userid="+e+"&c1="+t+"&c2="+n+"&parser="+o,"PFS","status=1, toolbar=0,location=0,directories=0,menuBar=0,resizable=1,scrollbars=yes,width=754,height=512,left=32,top=16")}function redirect(e){location.href=e.options[e.selectedIndex].value}function toggleblock(e){var t=document.getElementById(e);return"none"==t.style.display?t.style.display="":t.style.display="none",!1}function toggleAll(e){var t=document.querySelectorAll('[id^="blk_"]');for(i=0;i<t.length;i++)"hide"==e?t[i].style.display="none":"show"==e&&(t[i].style.display="table-row-group");return!1}function insertText(e,t,n){var o=null;e||(e=document);e:for(var s=0;s<e.forms.length;s++)for(var a=0;a<e.forms[s].elements.length;a++)if(e.forms[s].elements[a].name==t){o=e.forms[s].elements[a];break e}if(!o)return!1;if(e.selection)o.focus(),e.selection.createRange().text=n;else if(o.selectionStart||0==o.selectionStart){var i=o.selectionStart,r=o.selectionEnd;o.value=o.value.substring(0,i)+n+o.value.substring(r,o.value.length)}else o.value+=n;return!0}(()=>{"use strict";class e extends EventTarget{mode="production";driverType="";constructor(e,t=null){super(),this.driverType=e,null!==t&&(this.mode=t),this.init()}onEventTriggered(e){"production"!==this.mode&&console.log("ServerEventsClient: Server triggered event",e);const t=new CustomEvent("event",{detail:e});this.dispatchEvent(t)}}class t extends EventTarget{mode="production";eventsUrl=null;constructor(e,t=null){super(),null!==t&&""!==t&&(this.mode=t),this.eventsUrl=e}init(){}onEventTriggered(e){"production"!==this.mode&&console.log("ServerEventsDriver: Server triggered event",e);const t=new CustomEvent("event",{detail:e});this.dispatchEvent(t)}}class n extends t{#e=null;init(){if(null!==this.#e)return;"production"!==this.mode&&console.log("init ServerEventsSSEDriver. ",this.eventsUrl);const e=this.eventsUrl+"&ts="+Date.now();this.#e=new EventSource(e),"production"!==this.mode&&(this.#e.onopen=function(e){console.log("ServerEventsSSEDriver connection is open")}),this.#e.onmessage=e=>{const t=JSON.parse(e.data);void 0!==t.data&&"string"==typeof t.data&&""!==t.data&&(t.data=JSON.parse(t.data)),t.eventId=e.lastEventId,this.onEventTriggered(t)},"production"!==this.mode&&(this.#e.onerror=function(e){console.log("ServerEventsSSEDriver connection error")})}}class o extends t{#t=6e3;#n=null;#o=!1;init(){this.#o||(this.#o=!0,"production"!==this.mode&&console.log("init ServerEventsAjaxDriver ",this.eventsUrl),this.#n=setTimeout((()=>this.#s()),500))}async#s(){try{const e=this.eventsUrl+"&ts="+Date.now(),t=await fetch(e);if(!t.ok)throw new Error(`Response status: ${t.status}`);const n=await t.json();void 0!==n.events&&n.events.forEach((e=>{e.eventId=void 0!==e.id?e.id:null,this.onEventTriggered(e)})),this.#n=setTimeout((()=>this.#s()),this.#t)}catch(e){console.log("ServerEventsAjaxDriver get events error: "+e.message),this.#n=setTimeout((()=>this.#s()),this.#t)}}}class s{#a="/";#i="production";constructor(e=null,t=null){null!==e&&(this.#a=e),null!==t&&(this.#i=t)}getByType(e){let t=null;const s=this.#a+"?n=server-events&a=sse",a=this.#a+"?n=server-events&a=ajax&_ajax=1";return"sse"===e?(t=new n(s),"production"!==this.#i&&console.log("using ServerEventsSSEDriver",s)):(t=new o(a),"production"!==this.#i&&console.log("using ServerEventsAjaxDriver",a)),t}}class a extends e{init(){"production"!==this.mode&&console.log("init ServerEventsClient");const e=new s(getBaseHref(),this.mode).getByType(this.driverType,this.mode);e.addEventListener("event",(e=>{this.onEventTriggered(e.detail)})),e.init()}}class i extends e{init(){let e="/js/sharedWorkerServerEvents.min.js";"production"!==this.mode&&console.log("init ServerEventsSharedWorkerClient: "+e);try{const t=new SharedWorker(e).port;t.postMessage({config:{mode:this.mode,driver:this.driverType,baseUrl:getBaseHref()}}),t.onmessage=e=>{"production"!==this.mode&&console.log("ServerSentEventsSharedWorker event",e.data),this.onEventTriggered(e.data)}}catch(e){console.error(e)}}}class r{mode="production";#r=null;#l="sharedWorker";#d="sse";#c=null;constructor(){this.#c=new Map,this.#d=cot.cfg.serverEvents}addObserver(e,t,n){"none"!==cot.cfg.serverEvents&&(this.#c.set(e,{name:e,event:t,onEvent:n}),null===this.#r&&this.#h())}#h(){"none"!==cot.cfg.serverEvents&&("sharedWorker"===this.#l&&void 0!==typeof SharedWorker?("production"!==this.mode&&console.log("creating ServerEventsSharedWorkerClient"),this.#r=new i(this.#d,this.mode)):("production"!==this.mode&&console.log("creating ServerEventsClient"),this.#r=new a(this.#d,this.mode)),this.#r.addEventListener("event",(e=>{this.#u(e.detail)})))}#u(e){"production"!==this.mode&&console.log("Server triggered event",e),this.#c.forEach((t=>{t.event===e.event&&"function"==typeof t.onEvent&&t.onEvent(e)}))}}class l{static containerClass="toast-container position-fixed bottom-0 end-0 p-3";title="";message="";hint="";type="";delay=5e3;#m=null;constructor(e,t="",n="",o=""){void 0!==window.bootstrap?(this.title=t,this.message=e,this.hint=n,this.type=o):console.error('Bootstrap is not found. It is required for use "Toast" component')}show(){if(null===this.#m){let e=document.getElementById("toast-container");null===e&&(e=this.#v()),this.#m=e}const e=`<strong class="me-auto">${this.title}</strong>`,t=""!==this.hint?`<small>${this.hint}</small>`:"",n=`<div class="toast${""!==this.type?` text-bg-${this.type}`:""}" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="${this.delay}"><div class="toast-header">${e}${t}<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button></div><div class="toast-body">${this.message}</div></div>`,o=document.createElement("div");o.innerHTML=n;const s=o.firstElementChild;this.#m.appendChild(s),new window.bootstrap.Toast(s).show(),this.#m.lastElementChild.addEventListener("hidden.bs.toast",(()=>{s.remove(),""===this.#m.innerHTML&&(this.#m.remove(),this.#m=null)}))}#v(){const e=document.createElement("div");return e.id="toast-container",e.className=l.containerClass,document.body.append(e),e}}class d{title="";content="";buttons=null;centered=!1;dialogClass="modal-dialog";#p=null;constructor(e,t="",n=null){void 0!==window.bootstrap?(this.title=t,this.content=e,this.buttons=n):console.error('Bootstrap is not found. It is required for use "Modal" component')}show(){let e=this.dialogClass;this.centered&&(e+=" modal-dialog-centered");const t=`<div class="modal fade" id="CotontiDynamicModal" tabindex="-1" aria-labelledby="CotontiDynamicModalLabel" aria-hidden="true"><div class="${e}"><div class="modal-content"><div class="modal-header"><h5 class="modal-title" id="CotontiDynamicModalLabel">${this.title}</h5><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button></div><div class="modal-body">${this.content}</div><div class="modal-footer"></div></div></div></div>`,n=document.createElement("div");n.innerHTML=t,this.#p=n.firstElementChild,this.#f(),document.body.appendChild(this.#p),new bootstrap.Modal(this.#p).show(),this.#p.addEventListener("hidden.bs.modal",(()=>{this.#p.remove()}))}#f(){const e=this.#g();if(""===e||e===[])return;const t=this.#p.querySelector(".modal-footer");"string"!=typeof e?Array.isArray(e)&&e.forEach((e=>{"string"!=typeof e?t.appendChild(e):t.innerHTML+=e})):t.innerHTML=e}#g(){const e=[];let t=this.buttons;return t===[]?e:null===t?'<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>':"string"==typeof t?t:(Array.isArray(t)&&t.forEach((t=>{if("string"==typeof t)return void e.push(t);const n=document.createElement("button");void 0!==t.label&&(n.innerHTML=t.label),n.setAttribute("type",void 0!==t.btnType?t.btnType:"button"),n.classList.add("btn"),void 0!==t.type&&n.classList.add("btn-"+t.type),void 0!==t.closeOnClick&&!0===t.closeOnClick&&n.setAttribute("data-bs-dismiss","modal"),void 0!==t.onClick&&"function"==typeof t.onClick&&n.addEventListener("click",(e=>t.onClick(e))),e.push(n)})),e)}}window.cot=new class{cfg={};L={};#y=null;init(e){void 0!==e.config&&(this.cfg=e.config),void 0!==e.lang&&(this.L=e.lang)}getServerEvents(){return null===this.#y&&(this.#y=new r),this.#y}confirm(e,t,n,o="Ok",s="Cancel"){this.modal(e,t,[{label:o,onClick:e=>n(e),type:"primary",closeOnClick:!0},{label:s,closeOnClick:!0,type:"secondary"}])}getModal(e,t="",n=null){return new d(e,t,n)}modal(e,t="",n=null){const o=this.getModal(e,t,n);return o.show(),o}getToast(e,t="",n="",o=""){return new l(e,t,n,o)}toast(e,t="",n="",o="",s=5e3){const a=this.getToast(e,t,n,o);return null!==s&&(a.delay=s),a.show(),a}async loadData(e){if(!e)return{};void 0===this.loadedData&&(this.loadedData={});let t=[];("string"==typeof e||e instanceof String)&&(e=[e]);for(let n of e)n in this.loadedData||t.push(n);if(t.length>0){let n=new URLSearchParams({n:"main",a:"get"});t.forEach(((e,t,o)=>{n.append("data["+t+"]",e)})),n.append("_ajax",1);try{let e=await fetch("index.php?"+n.toString());if(e.ok){const t=await e.json();if(t.success)for(const e in t.data)this.loadedData[e]=t.data[e]}}catch(e){}}let n={};for(let t of e)t in this.loadedData&&(n[t]=this.loadedData[t]);return n}loadCaptcha(){this.loadData(["captcha","x"]).then((e=>{let t=document.querySelectorAll(".captcha-place-holder");for(let n of t){n.innerHTML=e.captcha,this.executeScriptElements(n),n.classList.remove("captcha-place-holder","loading"),n.classList.add("captcha");const t=n.closest("form");if(null!==t){let n=t.querySelector('input[type="hidden"][name="x"]');null!==n&&n.setAttribute("value",e.x)}}}))}executeScriptElements(e){const t=e.querySelectorAll("script");Array.from(t).forEach((e=>{const t=document.createElement("script");Array.from(e.attributes).forEach((e=>{t.setAttribute(e.name,e.value)})),t.text=e.text,e.parentNode.replaceChild(t,e)}))}}})();var ajaxErrorHandlers=new Array,ajaxSuccessHandlers=new Array,ajaxEnabled=!1;if("undefined"!=typeof jQuery)var ajaxCurrentBase=location.href.replace($("base").eq(0).attr("href"),"").replace(/\?.*$/,"").replace(/#.*$/,"");var ajaxUsed=!1,ajaxError=!1;function ajaxSend(e){var t=e.method?e.method.toUpperCase():"GET",n=e.data||"",o=e.url||$("#"+e.formId).attr("action");if("POST"===t)n+="&"+$("#"+e.formId).serialize();else if(e.formId){var s=o.indexOf("?")>0?"&":"?";o+=s+$("#"+e.formId).serialize()}return $.ajax({type:t,url:encodeURIfix(o),data:n,beforeSend:function(){e.nonshowloading||$("#"+e.divId).append('<span style="position:absolute; left:'+($("#"+e.divId).width()/2-110)+"px;top:"+($("#"+e.divId).height()/2-9)+'px;" class="loading" id="loading"><img src="./images/spinner.gif" alt="loading"/></span>').css("position","relative")},success:function(t){e.nonshowloading||$("#loading").remove(),e.nonshowfadein?$("#"+e.divId).html(t):$("#"+e.divId).hide().html(t).fadeIn(500);for(var n=0;n<ajaxSuccessHandlers.length;n++)ajaxSuccessHandlers[n].func?ajaxSuccessHandlers[n].func(t):ajaxSuccessHandlers[n](t)},error:function(t){if(e.nonshowloading||$("#loading").remove(),e.nonshowfadein?$("#"+e.divId).html(t):$("#"+e.divId).hide().html(t).fadeIn(500),ajaxErrorHandlers.length>0)for(var n=0;n<ajaxErrorHandlers.length;n++)ajaxErrorHandlers[n].func?ajaxErrorHandlers[n].func(t):ajaxErrorHandlers[n](t);else alert("AJAX error: "+t),ajaxError=!0}}),!1}function ajaxPageLoad(e){""!==e&&e.replace(/^#/,"");var t=e.match(/^get(-.*?)?;(.*)$/);if(t){var n=t[2].indexOf(";")>0?t[2].replace(";","?"):ajaxCurrentBase+"?"+decodeURIComponent(t[2]);return ajaxUsed=!0,ajaxSend({method:"GET",url:n,divId:t[1]?t[1].substr(1):"ajaxBlock"})}return""!==e||!ajaxUsed||ajaxSend({url:location.href.replace(/#.*$/,""),divId:"ajaxBlock"})}function ajaxFormLoad(e,t){var n=e.match(/^(get|post)(-.*?)?;(.*)$/);if(n){var o=n[3].indexOf(";")>0?n[3].replace(";","?"):ajaxCurrentBase+"?"+n[3];return ajaxUsed=!0,ajaxSend({method:n[1].toUpperCase(),url:o,divId:n[2]?n[2].substr(1):"ajaxBlock",formId:t})}return!0}function ajaxMakeHash(e,t,n){var o,s,a="post"==n?"post":"get",i="?",r=!!t&&t.match(/(get|post)(-[^ ;]+)?(;\S*)?/);return r&&(a=r[1],r[2]&&(a+=r[2]),r[3]&&(e=r[3].substr(1),i=";")),a+=";",e.indexOf(i)>0?(o=e.substr(0,e.indexOf(i)),s=e.substr(e.indexOf(i)+1),n&&"post"!=n&&(s+="&"+n)):(o=e,s="",n&&"post"!=n&&(s+=i+n)),a+=o==ajaxCurrentBase?s:o+";"+s}function bindHandlers(){("#comments"==location.hash||location.hash.match(/#c\d+/))&&$(".comments").css("display",""),$(".comments_link").click((function(){"none"==$(".comments").css("display")?$(".comments").css("display",""):$(".comments").css("display","none")})),location.href.match(/#comments/)&&$(".comments").css("display",""),ajaxEnabled&&($("body").on("submit","form.ajax",(function(){return"POST"==$(this).attr("method").toUpperCase()?ajaxFormLoad(ajaxMakeHash($(this).attr("action").replace(/#.*$/,""),$(this).attr("class"),"post"),$(this).attr("id")):window.location.hash=ajaxMakeHash($(this).attr("action").replace(/#.*$/,""),$(this).attr("class"),$(this).serialize()),ajaxError})),$("body").on("click","a.ajax",(function(){return window.location.hash=ajaxMakeHash($(this).attr("href").replace(/#.*$/,""),$(this).attr("rel")),ajaxError})),$("body").on("click","a.confirmLink",(function(){return!$(this).attr("href").match(/message.+920/i)||($("#confirmBox")&&$("#confirmBox").remove(),$("body").prepend('<div id="confirmBox" class="jqmWindow"></div>'),$("#confirmBox").jqm({ajax:$(this).attr("href"),modal:!0,onLoad:function(){$("#confirmBox").css("margin-left","-"+$("#confirmBox").width()/2+"px"),$("#confirmBox").css("margin-top","-"+$("#confirmBox").height()/2+"px")}}),$("#confirmBox").jqmShow(),!1)})),$(window).on("hashchange",(function(){ajaxPageLoad(window.location.hash.replace(/^#/,""))})),$("body").on("click","a#confirmNo",(function(){return!$("#confirmBox").is(".jqmWindow")||($("#confirmBox").jqmHide(),$("#confirmBox").remove(),!1)})))}"undefined"!=typeof jQuery&&$(document).ready((function(){ajaxEnabled&&""!=window.location.hash&&ajaxPageLoad(window.location.hash.replace(/^#/,"")),bindHandlers()})),window.name="main";//# sourceMappingURL=data:application/json;charset=utf-8;base64,
