/**
 * @package Cotonti
 * @copyright (c) Cotonti Team
 * @license https://github.com/Cotonti/Cotonti/blob/master/License.txt
 */
function encodeURIfix(e){return encodeURI(decodeURI(e)).replace(/%5B/g,"[").replace(/%5D/g,"]")}function getBaseHref(){var e=document.getElementsByTagName("base")[0].href;return null==e?"/":e}function popup(e,t,n){window.open(getBaseHref()+"index.php?o="+e,"","toolbar=0,location=0,directories=0,menuBar=0,resizable=0,scrollbars=yes,width="+t+",height="+n+",left=32,top=16")}function pfs(e,t,n,o){window.open(getBaseHref()+"index.php?e=pfs&userid="+e+"&c1="+t+"&c2="+n+"&parser="+o,"PFS","status=1, toolbar=0,location=0,directories=0,menuBar=0,resizable=1,scrollbars=yes,width=754,height=512,left=32,top=16")}function redirect(e){location.href=e.options[e.selectedIndex].value}function toggleblock(e){var t=document.getElementById(e);return"none"==t.style.display?t.style.display="":t.style.display="none",!1}function toggleAll(e){var t=document.querySelectorAll('[id^="blk_"]');for(i=0;i<t.length;i++)"hide"==e?t[i].style.display="none":"show"==e&&(t[i].style.display="table-row-group");return!1}function insertText(e,t,n){var o=null;e||(e=document);e:for(var r=0;r<e.forms.length;r++)for(var a=0;a<e.forms[r].elements.length;a++)if(e.forms[r].elements[a].name==t){o=e.forms[r].elements[a];break e}if(!o)return!1;if(e.selection)o.focus(),e.selection.createRange().text=n;else if(o.selectionStart||0==o.selectionStart){var s=o.selectionStart,i=o.selectionEnd;o.value=o.value.substring(0,s)+n+o.value.substring(i,o.value.length)}else o.value+=n;return!0}(()=>{"use strict";class e{eventsUrl=null;#e=null;onEvent=null;constructor(e,t=null){this.eventsUrl=e,null!==t&&(this.mode=t),this.init()}init(){null===this.#e&&("production"!==this.mode&&console.log("init ServerSentEventsClient"),this.#e=new EventSource(this.eventsUrl),"production"!==this.mode&&(this.#e.onopen=function(e){console.log("ServerSentEventsClient connection is open")}),this.#e.onmessage=e=>{const t=JSON.parse(e.data);void 0!==t.data&&"string"==typeof t.data&&""!==t.data&&(t.data=JSON.parse(t.data)),t.id=e.lastEventId,this.#t(t)},"production"!==this.mode&&(this.#e.onerror=function(e){console.log("ServerSentEventsClient connection error")}))}#t(e){"production"!==this.mode&&console.log("ServerSentEventsClient: Server triggered event",e),"function"!=typeof this.onEvent&&console.error(this.constructor.name+".onEvent is not defined"),this.onEvent(e)}}class t{eventsUrl=null;#n=null;onEvent=null;mode="production";constructor(e,t=null){this.eventsUrl=e,null!==t&&(this.mode=t),this.init()}init(){null===this.#n&&("production"!==this.mode&&console.log("init ServerSentEvents driver"),this.#n=new e(this.eventsUrl,this.mode),this.#n.onEvent=e=>{this.onEventTriggered(e)})}onEventTriggered(e){"function"!=typeof this.onEvent&&console.error(this.constructor.name+".onEvent is not defined"),this.onEvent(e)}}class n extends t{init(){"production"!==this.mode&&console.log("init ServerSentEventsSharedWorker driver");try{const e=new SharedWorker("/js/sharedWorkerSSE.min.js").port;e.postMessage({config:{url:this.eventsUrl,mode:this.mode}}),e.onmessage=e=>{"production"!==this.mode&&console.log("ServerSentEventsSharedWorker event",e.data),this.onEventTriggered(e.data)}}catch(e){console.error(e)}}}class o{#o=null;#r=null;mode="production";constructor(){this.#r=new Map}addObserver(e,t,n){this.#r.set(e,{name:e,event:t,onEvent:n}),null===this.#o&&this.#a()}#a(){const e=getBaseHref()+"index.php?n=server-events";void 0!==typeof SharedWorker?("production"!==this.mode&&console.log("creating ServerSentEventsSharedWorker driver"),this.#o=new n(e,this.mode)):("production"!==this.mode&&console.log("creating ServerSentEvents driver"),this.#o=new t(e,this.mode)),this.#o.onEvent=e=>{this.#s(e)},this.#o.mode=this.mode}#s(e){"production"!==this.mode&&console.log("Server triggered event",e),this.#r.forEach((t=>{t.event===e.event&&"function"==typeof t.onEvent&&t.onEvent(e.data)}))}}window.cot=new class{#i=null;getServerEvents(){return null===this.#i&&(this.#i=new o),this.#i}async loadData(e){if(!e)return{};void 0===this.loadedData&&(this.loadedData={});let t=[];("string"==typeof e||e instanceof String)&&(e=[e]);for(let n of e)n in this.loadedData||t.push(n);if(t.length>0){let n=new URLSearchParams({n:"main",a:"get"});t.forEach(((e,t,o)=>{n.append("data["+t+"]",e)})),n.append("_ajax",1);try{let e=await fetch("index.php?"+n.toString());if(e.ok){const t=await e.json();if(t.success)for(const e in t.data)this.loadedData[e]=t.data[e]}}catch(e){}}let n={};for(let t of e)t in this.loadedData&&(n[t]=this.loadedData[t]);return n}loadCaptcha(){this.loadData(["captcha","x"]).then((e=>{let t=document.querySelectorAll(".captcha-place-holder");for(let n of t){n.innerHTML=e.captcha,this.executeScriptElements(n),n.classList.remove("captcha-place-holder","loading"),n.classList.add("captcha");const t=n.closest("form");if(null!==t){let n=t.querySelector('input[type="hidden"][name="x"]');null!==n&&n.setAttribute("value",e.x)}}}))}executeScriptElements(e){const t=e.querySelectorAll("script");Array.from(t).forEach((e=>{const t=document.createElement("script");Array.from(e.attributes).forEach((e=>{t.setAttribute(e.name,e.value)})),t.text=e.text,e.parentNode.replaceChild(t,e)}))}}})();var ajaxErrorHandlers=new Array,ajaxSuccessHandlers=new Array,ajaxEnabled=!1;if("undefined"!=typeof jQuery)var ajaxCurrentBase=location.href.replace($("base").eq(0).attr("href"),"").replace(/\?.*$/,"").replace(/#.*$/,"");var ajaxUsed=!1,ajaxError=!1;function ajaxSend(e){var t=e.method?e.method.toUpperCase():"GET",n=e.data||"",o=e.url||$("#"+e.formId).attr("action");if("POST"===t)n+="&"+$("#"+e.formId).serialize();else if(e.formId){var r=o.indexOf("?")>0?"&":"?";o+=r+$("#"+e.formId).serialize()}return $.ajax({type:t,url:encodeURIfix(o),data:n,beforeSend:function(){e.nonshowloading||$("#"+e.divId).append('<span style="position:absolute; left:'+($("#"+e.divId).width()/2-110)+"px;top:"+($("#"+e.divId).height()/2-9)+'px;" class="loading" id="loading"><img src="./images/spinner.gif" alt="loading"/></span>').css("position","relative")},success:function(t){e.nonshowloading||$("#loading").remove(),e.nonshowfadein?$("#"+e.divId).html(t):$("#"+e.divId).hide().html(t).fadeIn(500);for(var n=0;n<ajaxSuccessHandlers.length;n++)ajaxSuccessHandlers[n].func?ajaxSuccessHandlers[n].func(t):ajaxSuccessHandlers[n](t)},error:function(t){if(e.nonshowloading||$("#loading").remove(),e.nonshowfadein?$("#"+e.divId).html(t):$("#"+e.divId).hide().html(t).fadeIn(500),ajaxErrorHandlers.length>0)for(var n=0;n<ajaxErrorHandlers.length;n++)ajaxErrorHandlers[n].func?ajaxErrorHandlers[n].func(t):ajaxErrorHandlers[n](t);else alert("AJAX error: "+t),ajaxError=!0}}),!1}function ajaxPageLoad(e){""!==e&&e.replace(/^#/,"");var t=e.match(/^get(-.*?)?;(.*)$/);if(t){var n=t[2].indexOf(";")>0?t[2].replace(";","?"):ajaxCurrentBase+"?"+decodeURIComponent(t[2]);return ajaxUsed=!0,ajaxSend({method:"GET",url:n,divId:t[1]?t[1].substr(1):"ajaxBlock"})}return""!==e||!ajaxUsed||ajaxSend({url:location.href.replace(/#.*$/,""),divId:"ajaxBlock"})}function ajaxFormLoad(e,t){var n=e.match(/^(get|post)(-.*?)?;(.*)$/);if(n){var o=n[3].indexOf(";")>0?n[3].replace(";","?"):ajaxCurrentBase+"?"+n[3];return ajaxUsed=!0,ajaxSend({method:n[1].toUpperCase(),url:o,divId:n[2]?n[2].substr(1):"ajaxBlock",formId:t})}return!0}function ajaxMakeHash(e,t,n){var o,r,a="post"==n?"post":"get",s="?",i=!!t&&t.match(/(get|post)(-[^ ;]+)?(;\S*)?/);return i&&(a=i[1],i[2]&&(a+=i[2]),i[3]&&(e=i[3].substr(1),s=";")),a+=";",e.indexOf(s)>0?(o=e.substr(0,e.indexOf(s)),r=e.substr(e.indexOf(s)+1),n&&"post"!=n&&(r+="&"+n)):(o=e,r="",n&&"post"!=n&&(r+=s+n)),a+=o==ajaxCurrentBase?r:o+";"+r}function bindHandlers(){("#comments"==location.hash||location.hash.match(/#c\d+/))&&$(".comments").css("display",""),$(".comments_link").click((function(){"none"==$(".comments").css("display")?$(".comments").css("display",""):$(".comments").css("display","none")})),location.href.match(/#comments/)&&$(".comments").css("display",""),ajaxEnabled&&($("body").on("submit","form.ajax",(function(){return"POST"==$(this).attr("method").toUpperCase()?ajaxFormLoad(ajaxMakeHash($(this).attr("action").replace(/#.*$/,""),$(this).attr("class"),"post"),$(this).attr("id")):window.location.hash=ajaxMakeHash($(this).attr("action").replace(/#.*$/,""),$(this).attr("class"),$(this).serialize()),ajaxError})),$("body").on("click","a.ajax",(function(){return window.location.hash=ajaxMakeHash($(this).attr("href").replace(/#.*$/,""),$(this).attr("rel")),ajaxError})),$("body").on("click","a.confirmLink",(function(){return!$(this).attr("href").match(/message.+920/i)||($("#confirmBox")&&$("#confirmBox").remove(),$("body").prepend('<div id="confirmBox" class="jqmWindow"></div>'),$("#confirmBox").jqm({ajax:$(this).attr("href"),modal:!0,onLoad:function(){$("#confirmBox").css("margin-left","-"+$("#confirmBox").width()/2+"px"),$("#confirmBox").css("margin-top","-"+$("#confirmBox").height()/2+"px")}}),$("#confirmBox").jqmShow(),!1)})),$(window).on("hashchange",(function(){ajaxPageLoad(window.location.hash.replace(/^#/,""))})),$("body").on("click","a#confirmNo",(function(){return!$("#confirmBox").is(".jqmWindow")||($("#confirmBox").jqmHide(),$("#confirmBox").remove(),!1)})))}"undefined"!=typeof jQuery&&$(document).ready((function(){ajaxEnabled&&""!=window.location.hash&&ajaxPageLoad(window.location.hash.replace(/^#/,"")),bindHandlers()})),window.name="main";//# sourceMappingURL=data:application/json;charset=utf-8;base64,
